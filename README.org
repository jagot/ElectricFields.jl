#+TITLE: ElectricFields.jl
#+AUTHOR: Stefanos Carlström
#+EMAIL: stefanos.carlstrom@gmail.com

[[https://travis-ci.org/jagot/ElectricFields.jl][https://travis-ci.org/jagot/ElectricFields.jl.svg?branch=master]]
[[https://coveralls.io/github/jagot/ElectricFields.jl?branch=master][https://coveralls.io/repos/github/jagot/ElectricFields.jl/badge.svg?branch=master]]
[[http://codecov.io/gh/jagot/ElectricFields.jl][http://codecov.io/gh/jagot/ElectricFields.jl/branch/master/graph/badge.svg]]

#+PROPERTY: header-args:julia :session *julia-README*

A small Julian DSL for defining electrical fields, chiefly for use in
atomic physics calculations.

* Usage
 First we load the library and set the base units, which are used if
 unitless quantities are passed to =@field=, below. The units are
 defined in the fashion of [[https://github.com/ajkeller34/Unitful.jl][Unitful.jl]].
 #+BEGIN_SRC julia :exports both
   using ElectricFields

   # These are the default base units, so setting these is actually not
   # necessary, if you are happy with the defaults.
   @set_base_units() do
       λ  : u"nm"
       I₀ : u"W/cm^2"
       τ  : u"fs"
   end
 #+END_SRC

 #+RESULTS:
 : nothing

 We can now define a field, which we name =IR=, using the =@field=
 macro:
 #+BEGIN_SRC julia :exports both :results value code
   @field(IR) do
       λ  : 800
       I₀ : 1e14
       τ  : 6.2
   end
 #+END_SRC

 #+RESULTS:
 #+begin_src julia
 Dict{Symbol,Number}(Pair{Symbol,Number}(:T, 1//374740572500000 s),Pair{Symbol,Number}(:ν, 12500.0 cm^-1),Pair{Symbol,Number}(:f, 374740572500000//1 Hz),Pair{Symbol,Number}(:E₀, 2.74492e10 m^-1 V),Pair{Symbol,Number}(:λ, 800 nm),Pair{Symbol,Number}(:I₀, 1.0e14 cm^-2 W),Pair{Symbol,Number}(:τ, 6.2 fs),Pair{Symbol,Number}(:ω, 2.35456e15 rad s^-1))
 #+end_src

* Ideas
  - Harmonic fields
  - Chirped/dispersed fields
  - Elliptically polarized fields
