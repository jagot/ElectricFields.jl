#+TITLE: ElectricFields.jl
#+AUTHOR: Stefanos Carlström
#+EMAIL: stefanos.carlstrom@gmail.com

[[https://travis-ci.org/jagot/ElectricFields.jl][https://travis-ci.org/jagot/ElectricFields.jl.svg?branch=master]]
[[https://coveralls.io/github/jagot/ElectricFields.jl?branch=master][https://coveralls.io/repos/github/jagot/ElectricFields.jl/badge.svg?branch=master]]
[[http://codecov.io/gh/jagot/ElectricFields.jl][http://codecov.io/gh/jagot/ElectricFields.jl/branch/master/graph/badge.svg]]

#+PROPERTY: header-args:julia :session *julia-README*

A small Julian DSL for defining electrical fields, chiefly for use in
atomic physics calculations.

This is a [[https://github.com/jagot/LiterateOrg.jl][LiterateOrg.jl]] project. The documentation is found [[file:src/ElectricFields.org][within the code]].

* Usage
 First we load the library and set the base units, which are used if
 unitless quantities are passed to =@field=, below. The units are
 defined in the fashion of [[https://github.com/ajkeller34/Unitful.jl][Unitful.jl]].
 #+BEGIN_SRC julia :exports both
   using ElectricFields

   # These are the default base units, so setting these is actually not
   # necessary, if you are happy with the defaults.
   @set_base_units() do
       λ  = u"nm"
       I₀ = u"W/cm^2"
       τ  = u"fs"
   end
 #+END_SRC

 #+RESULTS:
 : nothing

 We can now define a field, which we name =IR=, using the =@field=
 macro:
 #+BEGIN_SRC julia :exports both :results value verbatim
   @field(IR) do
       λ    = 800.0
       I₀   = 1e14
       τ    = 6.2
       tmax = 10
   end
 #+END_SRC

 #+RESULTS:
 : ElectricFields.LinearField(ElectricFields.FixedCarrier(800.0 nm, 2.6685127615852163e-15 s, 2.3545644591360665e15 rad s^-1), ElectricFields.GaussianEnvelope(6.2 fs, 2.632897580892859 fs, 3.7234794672379947 fs, 10.135269905486714, 7.166718079325594, 10))

* Ideas
  - Harmonic fields
  - Chirped/dispersed fields
  - Elliptically polarized fields
