#+TITLE: ElectricFields.jl
#+AUTHOR: Stefanos Carlström
#+EMAIL: stefanos.carlstrom@gmail.com

[[https://travis-ci.org/jagot/ElectricFields.jl][https://travis-ci.org/jagot/ElectricFields.jl.svg?branch=master]]
[[https://coveralls.io/github/jagot/ElectricFields.jl?branch=master][https://coveralls.io/repos/github/jagot/ElectricFields.jl/badge.svg?branch=master]]
[[http://codecov.io/gh/jagot/ElectricFields.jl][http://codecov.io/gh/jagot/ElectricFields.jl/branch/master/graph/badge.svg]]

#+PROPERTY: header-args:julia :session *julia-README*

A small Julian DSL for defining electrical fields, chiefly for use in
atomic physics calculations.

This is a [[https://github.com/jagot/LiterateOrg.jl][LiterateOrg.jl]] project. The documentation is found [[file:src/ElectricFields.org][within the code]].


#+BEGIN_SRC julia :exports none
  using Unitful
  using PyPlot
  matplotlib[:style][:use]("ggplot")

  mkpath("images")

  function savefig_f(filename)
      filename = "./images/$(filename).svg"
      savefig(filename, transparent=true)
      filename
  end
#+END_SRC

#+RESULTS:

* Usage
 First we load the library and set the base units, which are used if
 unitless quantities are passed to =@field=, below. The units are
 defined in the fashion of [[https://github.com/ajkeller34/Unitful.jl][Unitful.jl]].
 #+BEGIN_SRC julia :exports both
   using ElectricFields

   # These are the default base units, so setting these is actually not
   # necessary, if you are happy with the defaults.
   @set_base_units() do
       λ  = u"nm"
       I₀ = u"W/cm^2"
       τ  = u"fs"
   end
 #+END_SRC

 #+RESULTS:
 : nothing

 We can now define a field, which we name =IR=, using the =@field=
 macro:
 #+BEGIN_SRC julia :exports both :results value verbatim
   @field(IR) do
       λ    = 800.0
       I₀   = 1e14
       τ    = 6.2
       tmax = 10
   end
 #+END_SRC

 #+RESULTS:
 : Linearly polarized field with a
 :   Fixed carrier @ λ = 800.00 nm (T = 2.67 fs) and a
 :   I₀ = 1e+14 cm^-2 W Gaussian envelope of duration 6.2 fs (intensity FWHM; ±10.14σ)

 #+BEGIN_SRC julia :exports both :results value verbatim
   @field(IR2) do
       λ    = 800.0
       I₀   = 1e14
       τ    = 6.2
       tmax = 10
       ϕ    = π/2
   end
 #+END_SRC

 #+RESULTS:
 : Linearly polarized field with a
 :   Fixed carrier @ λ = 800.00 nm (T = 2.67 fs); CEP = 0.50π and a
 :   I₀ = 1e+14 cm^-2 W Gaussian envelope of duration 6.2 fs (intensity FWHM; ±10.14σ)

 #+BEGIN_SRC julia :exports code
   t = linspace(-1,1,1001)*10u"fs"
   E = IR.(t)
   E2 = IR2.(t)
 #+END_SRC

 #+RESULTS:

 #+BEGIN_SRC julia :exports results :results value file
   figure("pulse")
   clf()
   plot(t./u"fs", IR.(t)./1e10u"V/m")
   plot(t./u"fs", IR2.(t)./1e10u"V/m")
   xlabel(L"$t$ [fs]")
   ylabel(L"$E$ [$10^{10}$ V/m]")
   tight_layout()
   savefig_f("ir")
 #+END_SRC

 #+RESULTS:
 [[file:./images/ir.svg]]


* Ideas
  - Harmonic fields
  - Chirped/dispersed fields
  - Elliptically polarized fields
