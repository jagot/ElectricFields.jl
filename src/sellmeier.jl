# * Media

using Unitful
import Unitful: Length, Area, Frequency
import Base: show
@derived_dimension InverseArea Unitful.ùêã^(-2)

@doc raw"""
    Sellmeier(A, B, p, C, D, q)

The [Sellmeier
equations](https://en.wikipedia.org/wiki/Sellmeier_equation) are used
to describe dispersion in glass using a series of resonances, here
generalized to support variations found in the literature:

```math
n^2(\lambda) =
1 + A + \sum_i \frac {B_i\lambda^{p_i}}{\lambda^2-C_i} + \sum_j D_j \lambda^{q_j}.
```
"""
struct Sellmeier{T<:Real,Bt,Ct<:Area{T},Dt}
    A::T
    B::Vector{Bt}
    p::Vector{Int}
    C::Vector{Ct}
    D::Dt
    q::Vector{Int}
end

@doc raw"""
    Sellmeier(B, C)

Convenience constructor for [`Sellmeier`](@ref) for the canonical form of
the Sellmeier equation:

```math
n^2(\lambda) =
1 + \sum_i \frac {B_i\lambda^2}{\lambda^2-C_i}.
```
"""
Sellmeier(B::Vector{T}, C::Vector{Ct}) where {T<:Real,Ct<:Area{T}} =
    Sellmeier(zero(T), B, fill(2, length(B)), C, zeros(T,0), zeros(Int, 0))

function show(io::IO, m::Sellmeier)
    write(io, "Sellmeier(")
    show(io, m.A)
    write(io, ", ")
    show(io, m.B)
    write(io, ", ")
    show(io, m.p)
    printfmt(io, ", [{1:s}]",
             join(string.(m.C), ", "))
    printfmt(io, ", [{1:s}]",
             join(string.(m.D), ", "))
    write(io, ", ")
    show(io, m.q)
    write(io, ")")
end

Base.Broadcast.broadcastable(m::Sellmeier) = Ref(m)

# ** BK7
"""
    BK7

[Borosilicate glass](https://en.wikipedia.org/wiki/Borosilicate_glass)
is commonly used in optical lenses
"""
const BK7 = Sellmeier([1.03961212, 0.231792344, 1.01046945],
                      [6.00069867e-3u"Œºm"^2, 2.00179144e-2u"Œºm"^2, 1.03560653e2u"Œºm"^2])

# ** SiO‚ÇÇ

"""
    SiO‚ÇÇ

[Fused silica](https://en.wikipedia.org/wiki/Fused_quartz#Optical_properties)
"""
const SiO‚ÇÇ = Sellmeier([0.6961663, 0.4079426, 0.8974794],
                       [0.0684043u"Œºm", 0.1162414u"Œºm", 9.896161u"Œºm"].^2)

# ** Calcite

"""
    Calcite

Calcite is a uniaxial, birefringent crystal.

Numbers taken from <http://www.newlightphotonics.com/v1/calcite-properties.html>.
"""
const Calcite = SVector(Sellmeier(1.69705, [0.0192064u"Œºm^2"], [0], [0.01820u"Œºm^2"], (-0.0151624u"Œºm^-2",), [2]),
                        Sellmeier(1.18438, [0.0087309u"Œºm^2"], [0], [0.01018u"Œºm^2"], (-0.0024411u"Œºm^-2",), [2]))

# ** Quartz

"""
    Quartz

Quartz is a uniaxial, birefrigent crystal.

Numbers taken from <https://www.newlightphotonics.com/v1/quartz-properties.html>.
"""

const Quartz = SVector(Sellmeier(1.3573, Float64[], Int[], fill(0.0u"Œºm^2", 0),
                                 (-0.01170u"Œºm^-2", 0.01054u"Œºm^2", 1.3414e-4u"Œºm^4", -4.4537e-7u"Œºm^6", 5.9236e-8u"Œºm^8"), [2,-2,-4,-6,-8] ),
                       Sellmeier(1.3849, Float64[], Int[], fill(0.0u"Œºm^2", 0),
                                 (-0.01259u"Œºm^-2", 0.01079u"Œºm^2", 1.6518e-4u"Œºm^4", -1.9474e-6u"Œºm^6", 9.3648e-8u"Œºm^8"), [2,-2,-4,-6,-8]))

# ** KTP

"""
    KTP

KTP is a biaxial crystal.

Numbers taken from <https://www.redoptronics.com/KTP-crystal.html>.
"""
const KTP = SVector(Sellmeier(1.10468, [0.89342], [2], [0.04438u"Œºm^2"], (-0.01036u"Œºm^-2",), [2]),
                    Sellmeier(1.14559, [0.87629], [2], [0.0485u"Œºm^2"], (-0.01173u"Œºm^-2",), [2]),
                    Sellmeier(0.9446,  [1.3617],  [2], [0.047u"Œºm^2"], (-0.01491u"Œºm^-2",), [2]))

# * Refractive index

function n¬≤(m::Sellmeier, Œª::Length)
    v = 1.0 + m.A
    isinf(Œª) && return v

    v += NoUnits(sum([B·µ¢*Œª^p·µ¢/(Œª^2-C·µ¢)
                     for (B·µ¢,p·µ¢,C·µ¢) ‚àà zip(m.B, m.p, m.C)], init=0.0))
    v += NoUnits(sum([D‚±º*Œª^q‚±º for (D‚±º,q‚±º) ‚àà zip(m.D,m.q)], init=0.0))

    v
end

n¬≤(m::AbstractVector{<:Sellmeier}, Œª::Length) = n¬≤.(m, Œª)

maybe_complex(x) = x<0 ? complex(x) : x
refractive_index(m::Sellmeier, Œª::Length) = ‚àö(maybe_complex(n¬≤(m, Œª)))
refractive_index(m::Sellmeier, f::Frequency) = refractive_index(m, u"c"/f)

(m::Sellmeier)(x) = refractive_index(m, x)

# * Dispersion

"""
    dispersion(m, d, f[, f‚ÇÄ=0u"Hz])

Calculate dispersion through a Sellmeier `m` of length `d`. Optionally,
remove central frequency k-vector, to keep pulse temporally centred.
"""
function dispersion(m::Sellmeier, d::Length, f::AbstractVector{F}, f‚ÇÄ::Frequency = 0u"Hz") where {F<:Frequency}
    n = real(m.(f))

    # Wavevector in vacuum
    k‚ÇÄ = 2œÄ*f./u"c"
    # Wavevector in the Sellmeier
    k = n.*k‚ÇÄ

    if !iszero(f‚ÇÄ)
        # Slope of dispersion relation at central frequency
        ‚àÇk‚àÇf = (2œÄ/u"c")*ForwardDiff.derivative(f -> real(m(f*u"Hz"))*f, f‚ÇÄ/u"Hz" .|> NoUnits)
        k -= ‚àÇk‚àÇf*f
    end

    exp.(-im*k*d)
end
# * Exports

export Sellmeier, BK7, SiO‚ÇÇ, Calcite, Quartz, KTP, refractive_index, dispersion
